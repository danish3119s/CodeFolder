<?php
include "keywords.php";
class Wellsfargo{
	public $ProcessingVolume;
	public $Deduction;
// 	public function __construct(){
// 		$KeyWords= new KeyWords();
// 		$this->globalmonth="";
// 		$this->Deduction=$KeyWords->DeductionKeyword();
// 		$this->CompetitorData=$KeyWords->Competitor();
// 		$this->DoNotPickKey=$KeyWords->DoNotPickKey();
// 	}

	public function __construct($consvar){
		$KeyWords= new KeyWords();
		$this->globalmonth="";
	//	$this->Deduction=$KeyWords->DeductionKeyword();
	    $this->Deduction=$KeyWords->DeductionKeyword2($consvar);
		$this->CompetitorData=$KeyWords->Competitor();
		$this->DoNotPickKey=$KeyWords->DoNotPickKey();
		$this->DeductionFlag=$KeyWords->DeductionFlag();
	}

	public function GetDataOFAllMonth($text){
	  //  print_r($text);
		//$ExtractedMonth=$this->GetDataForAllMonth($text);
		$CalculateProcessingVolume=array();
		$DateAndMonthAndAccountNbr=$this->DateAndMonth($text);
		$CompleteInfo=$this->GetDataForSections($text);
		//print_r($CompleteInfo);
		$Month=strtotime(str_replace("-","/",$DateAndMonthAndAccountNbr[0]));
		$month=date("F",$Month);
		
		$CalculateProcessingVolume[$month]=$this->ProcessingVolume($CompleteInfo,$DateAndMonthAndAccountNbr);
		$CalculateProcessingVolume[$month]["processingvolume"]["BankName"]="WELLS FARGO";
		$CalculateProcessingVolume[$month]["processingvolume"]["AccountNumber"]=$DateAndMonthAndAccountNbr[1];
		$CalculateProcessingVolume[$month]["deduction"]["BankName"]="WELLS FARGO";
		$CalculateProcessingVolume[$month]["deduction"]["AccountNumber"]=$DateAndMonthAndAccountNbr[1];
    	//$CalculateProcessingVolume[$month]["processingvolume"]["OppId"]=$_GET['attachmentid'];
		//print_r($CalculateProcessingVolume["processingvolume"]["AccountNumber"]);
		$CalculateProcessingVolume["Status"]="success";
		$CalculateProcessingVolume["Reason"]=null;
		//print_r($CalculateProcessingVolume);
		//print_r(json_encode($CalculateProcessingVolume));
		return $CalculateProcessingVolume;
		//$CalculateProcessingVolume["Status"]="success";
		

	}

	public function DateAndMonth($text){
		preg_match('/Account number:(.*?)<br>  <br>/s', $text, $Acandmonth);
	    $Ac = explode(' ',$Acandmonth[1]);
	    $AccountNbr = $Ac[2];
	 
//	print_r($Acandmonth);
	if(empty($Acandmonth)){
	    $Refinedtext= $this->RemoveBS($text);  
	    preg_match('/Account number: (.*?)<br>/', $Refinedtext, $Acandmonth);
//	    print_r($Acandmonth);
	    $AccountNbr = trim($Acandmonth[1]);
	    //Account number: 6797873210<br>     December 1 2017 - December 31 2017<br>     Page 1 of 8<br>
	  //  preg_match('/<br>(.*?)-(.*?)<br>(.*?)Page/', $Refinedtext, $DateAndMonth);
	  preg_match('/\d{10}<br> (.*?)\d{1,} \d{4} - (.*?)\d{1,} \d{4}<br>(.*?)Page/', $Refinedtext, $DateAndMonth);
	  $DateAndMonth = explode('-',$DateAndMonth[0]);
//	    print_r($DateAndMonth);
	    $date2=trim(substr($DateAndMonth[1],0,17)); // print_r($date2);
	    $date2=date("m-d-Y",strtotime($date2));
	    return array($date2,$AccountNbr);
	    
	}
		preg_match('/s (.*?) s/s', $Acandmonth[1], $DateAndMonth);
	//	print_r($DateAndMonth);  die();
		$DateAndMonth = explode('-',str_replace('<br>','',$DateAndMonth[1]));
		$date1=date("m-d-Y",strtotime($DateAndMonth[0]));
		$date2=date("m-d-Y",strtotime($DateAndMonth[1]));
		//print_r($date1);
		//print_r($date2);
		if($date1==$date2){
			//print_r(array($date1,$AccountNbr));
		    return array($date1,$AccountNbr);
		}else{
			//print_r(array($date2,$AccountNbr));
		    return array($date2,$AccountNbr);
		}
	}

	public function GetDataForSections($text){
		//5 for four columns in account summary 
		//2 for three column data(credits,debits)
		//3 for two column daily ending balance column data
		//1 for single column average ledger blnc
		$Sections=array(
					0=>array("StartSection"=>"Account summary","EndSection"=>"Credits","ColumnCount"=>5),
					1=>array("StartSection"=>"Credits","EndSection"=>"Total credits","ColumnCount"=>2),
					2=>array("StartSection"=>"Debits","EndSection"=>"Total electronic debits\/bank debits","ColumnCount"=>2),
					3=>array("StartSection"=>"Daily ledger balance summary","EndSection"=>"Average daily ledger balance","ColumnCount"=>3),
					4=>array("StartSection"=>"Average daily ledger balance","EndSection"=>"NOTICE:","ColumnCount"=>1)
				);
		
		//$data=array();
		foreach($Sections as $Sectionskey=>$Sectionsvalue){
			preg_match("/(?<=".$Sectionsvalue['StartSection'].")(.*?)(?=".$Sectionsvalue['EndSection'].")/s",$text,$SectionExtracted);	
			//print_r($SectionExtracted[0]);
			$sectionrt=$SectionExtracted[0];
			$data[$Sectionsvalue['StartSection']]=$this->IndividualSectionParser($sectionrt,$Sectionsvalue["ColumnCount"]);
		}
		//print_r($data);die();
		return $data;
	}

	public function IndividualSectionParser($SectionList,$ColumnCount){
		preg_match_all("/(?:<br>)([\s\S]*?)(?=<br>)/s",$SectionList,$brList);
		$brList=$brList[0];
		//print_r($brList);
		$SectionData="";
		if($ColumnCount==5){
			$SectionData=$this->commonparser5($brList);
		}elseif($ColumnCount==1){
			$SectionData=$this->commonparser1($brList);
		}elseif($ColumnCount==3){
			$SectionData=$this->commonparser3($brList);
		}elseif($ColumnCount==2){
			$SectionData=$this->commonparser2($brList);
		}
		return $SectionData; 
	}
	public function commonparser1($brList){
		$AllList=strip_tags($brList[0]);
		return abs($AllList);
	}
	public function commonparser5($brList){
		$brListstriptags=array();
		$summaryinfo=array();
		foreach($brList as $AllListkey => $AllListvalue){
			$AllListvalue=strip_tags($AllListvalue);
			array_push($brListstriptags, $AllListvalue);
		}
		for($i=1 ; $i<6 ; $i++){
			$summaryinfo[$brListstriptags[$i]]=$brListstriptags[$i+5];	
		}
		//print_r($summaryinfo);
		return $summaryinfo;
	}
	public function commonparser2($brList){
		$AllList=$brList;
		//print_r($AllList);
		$CommonArray=array();
		$we=0;
		for($i=0;$i<sizeof($AllList);$i++){
			$Alllistfor=strip_tags($AllList[$i]);
			if(preg_match("/\d{2}\/\d{2}/",trim($Alllistfor)) && strtotime(trim($Alllistfor))){
				if(!empty($AllList[$i+3]))if(preg_match("/^\d{2}\/\d{2}/",trim(strip_tags($AllList[$i+3])))){$extraLineData='';}else{$extraLineData=strip_tags($AllList[$i+3]);}
				$CommonArray[$we]["CDWDate"]=date("m-d-Y",strtotime(trim(strip_tags($AllList[$i]))));
				$CommonArray[$we]["Description"]=trim(strip_tags(($AllList[$i+2]))).$extraLineData;
				$CommonArray[$we]["Amount"]=trim(strip_tags($AllList[$i+1]));

				$we++;
			}
		}
		//print_r($CommonArray);
		return $CommonArray;
	}
	public function commonparser3($brList){
		$AllList=$brList;
		$CommonArray=array();
		$we=0;
		for($i=0;$i<sizeof($AllList);$i++){
			$Alllistfor=strip_tags($AllList[$i]);
			if(preg_match("/^\d{2}\/\d{2}/",trim($Alllistfor)) && strtotime($Alllistfor)){
				$CommonArray[$we]["CDWDate"]=date("m-d-Y",strtotime(trim(strip_tags($AllList[$i]))));
				$CommonArray[$we]["Amount"]=trim(strip_tags($AllList[$i+1]));
				$we++;
			}
		}
		//print_r($CommonArray);
		return $CommonArray;
	}

	public function ProcessingVolume($CompleteInfo,$DateAndMonthAndAccountNbr){
		//print_r($CompleteInfo);die();
		$DoNoConsider=$this->Deduction;
		//print_r($DoNoConsider);die();
		 $DeductionFlag=$this->DeductionFlag;
		$DoNotPickKey=$this->DoNotPickKey;
		//$PVDEDESC=$CalculatePVDe["ProcessingVolumeSectionDescriptionColumn"];
		$PAAmount=0;
		$DeNbrminus=0;
		$DeNbrPlus=0;
		$DeductionAmount=0;
		$Descritionfound='';
		//print_r($DoNotPickKey);
		foreach($CompleteInfo["Credits"] as $AmountSum){
			$PAAmount+=$AmountSum["Amount"];			
			//print_r($AmountSum["Description"]."\n");
			//print_r(strtolower($AmountSum["Description"])."\n");
			//print_r($DoNoConsider);
			foreach($DoNoConsider as $DoNoConsiderkey => $DoNoConsidervalue){
			    $description=" ".strtolower($AmountSum["Description"])." ";
			    $DoNoConsidervalueSmall=strtolower($DoNoConsidervalue);
			    
			    if(strpos($description,$DoNoConsidervalueSmall) !== false){
				    if(trim($DoNoConsidervalueSmall)=='transfer credit'){
				        if(strpos($description,'dba') !== false){
				            
				        }else{
				            continue;
				        }
				    }

			        $DoNotStatus=true;
//if(!$DoNoConsidervalueSmall==='reimbursement' || !$DoNoConsidervalueSmall==='return' ||  !$DoNoConsidervalueSmall==='refund' ||   !$DoNoConsidervalueSmall==='returned' ){	        
	    			foreach($DoNotPickKey as $DoNotPickKeyKEY => $DoNotPickKeyVALUE){
	    			    $DoNotPickKeyVALUESmall=strtolower($DoNotPickKeyVALUE);
    				    if(strpos($description,$DoNotPickKeyVALUESmall) !== false){
        					$DoNotStatus=false;
    				    }
	    			}
	//			}
	                	foreach($DeductionFlag as $PickKeyKEY => $PickKeyVALUE){
                	    //print_r($PickKeyVALUE." \n");
                	    if(strpos($description,$PickKeyVALUE) !== false){
                	         $DoNotStatus=true;
                	    }
                	    
                	}
	
	
				    if($DoNotStatus){
				        $DeNbrminus++;
    					$DeductionAmount+=$AmountSum["Amount"];
    					$Descritionfound.=$DoNoConsidervalue.",";
    					break;
				    }
				}
			}
			$DeNbrPlus++;
		}
		
		//die();
		$AvgNumberofMonthlyDeposits=$DeNbrPlus-$DeNbrminus;
		$NumofDailyNegatives=0;
		$AvgDailyBankBalance=0;
		foreach($CompleteInfo["Daily ledger balance summary"] as $NumNegatives){
			if($NumNegatives["Amount"]<0){
				$NumofDailyNegatives++;
			}
			$AvgDailyBankBalance+=$NumNegatives["Amount"];
		}
		$SizeOf=sizeof($CompleteInfo["Daily ledger balance summary"]);
		$FinalAvgDailyBankBalance=$AvgDailyBankBalance/$SizeOf;
		//print_r($CompleteInfo);die();


		$FoundCompititor1=array();
		$Amount=array();
		$keyCom=0;
		foreach($CompleteInfo["Debits"] as $keyc=>$CompetitorSection){
			foreach($this->CompetitorData as $compkey => $compvalue){
				if(strpos(strtolower($CompetitorSection["Description"]),strtolower($compvalue->Name)) !== false){
					$FoundCompititor1[$keyCom]=$CompetitorSection;
					$FoundCompititor1[$keyCom]["Name"]=$compvalue->Name;
					$FoundCompititor1[$keyCom]["CompetitorId"]=$compvalue->Id;
					$keyCom++;
				}
			}
		}
		
		 if (strpos($DateAndMonthAndAccountNbr[0], "12-31-1969") !== false){
             $EndVar=end($CompleteInfo["Credits"]); // print_r($EndVar["DatePosted"]);str_replace(find,replace,string,count)
          $DateAndMonthAndAccountNbr[0]=str_replace("1969","2017",$EndVar["CDWDate"]);  //  print_r($DateAndMonthAndAccountNbr[0]); substr($myStr, 0, 5);
          $Statmentmonth=substr($DateAndMonthAndAccountNbr[0], 0, 2);  
    //          print_r($Statmentmonth." \n");
                  $now = new \DateTime('now');
  $month2 = $now->format('m');
 //  print_r($month2." \n");
   // $CurrentYear = $now->format('y');
             $CurrentYear =date('Y');
  //  print_r($CurrentYear." \n");
       if($month2==$Statmentmonth){$DateAndMonthAndAccountNbr[0]=$DateAndMonthAndAccountNbr[0]=$DateAndMonthAndAccountNbr[0]=str_replace("2017",$CurrentYear,$DateAndMonthAndAccountNbr[0]);
       }elseif($month2<$Statmentmonth){$DateAndMonthAndAccountNbr[0]=$DateAndMonthAndAccountNbr[0]=str_replace("2017",$CurrentYear-1,$DateAndMonthAndAccountNbr[0]);
    }elseif($month2>$Statmentmonth){$DateAndMonthAndAccountNbr[0]=str_replace("2017",$CurrentYear,$DateAndMonthAndAccountNbr[0]);  }
    
} 

		
		$FinalJson=array();
		$FinalJson["processingvolume"]["Month"]=substr_replace($DateAndMonthAndAccountNbr[0],'01',3,2);//$DateAndMonthAndAccountNbr[0];
		$FinalJson["processingvolume"]["Amount"]=$PAAmount;
		$FinalJson["processingvolume"]["AmountDeductions"]=$PAAmount-$DeductionAmount;
		$FinalJson["processingvolume"]["NumofDailyNegatives"]=$NumofDailyNegatives;
		$FinalJson["processingvolume"]["AvgNumberofMonthlyDeposits"]=$AvgNumberofMonthlyDeposits;
		$FinalJson["processingvolume"]["AvgDailyBankBalance"]=$CompleteInfo["Average daily ledger balance"];//round($FinalAvgDailyBankBalance,2);
		$FinalJson["deduction"]["Month"]=substr_replace($DateAndMonthAndAccountNbr[0],'01',3,2);//$DateAndMonthAndAccountNbr[0];
		$FinalJson["deduction"]["Amount"]=$DeductionAmount;
		$FinalJson["deduction"]["Type"]=substr_replace($DateAndMonthAndAccountNbr[0],'01',3,2)."-".$PAAmount;
		$FinalJson["deduction"]["Description"]=trim(implode(',',array_unique(explode(',', $Descritionfound))),","); //trim($Descritionfound,",");
		$FinalJson["competitor"]=$FoundCompititor1;
		$FinalJson["EWithDrawals"]=$CompleteInfo["Debits"];
		$FinalJson["DailySummary"]=$CompleteInfo["Daily ledger balance summary"];
		$FinalJson["ADeposits"]=$CompleteInfo["Credits"];
		
	    //print_r(json_encode($FinalJson));die();
		//print_r($FinalJson);
		return $FinalJson;
	}

	 function RemoveBS($Str) {  
  $StrArr = str_split($Str); $NewStr = '';
  foreach ($StrArr as $Char) {    
    $CharNo = ord($Char);
    if ($CharNo == 163) { $NewStr .= $Char; continue; } // keep £ 
    if ($CharNo > 31 && $CharNo < 127) {
      $NewStr .= $Char;    
    }
  }  
  return $NewStr;
}
	
}



//$object->GetDataForSections($text);
?>
