<?php
include "keywords.php";
class PncBank{
	public $ProcessingVolume;
	public $Deduction;
// 	public function __construct(){
// 		$KeyWords= new KeyWords();
// 		$this->globalmonth="";
// 		$this->Deduction=$KeyWords->DeductionKeyword();
// 		$this->CompetitorData=$KeyWords->Competitor();
// 		$this->DoNotPickKey=$KeyWords->DoNotPickKey();
// 	}
	public function __construct($consvar){
		$KeyWords= new KeyWords();
		$this->globalmonth="";
	//	$this->Deduction=$KeyWords->DeductionKeyword();
	    $this->Deduction=$KeyWords->DeductionKeyword2($consvar);
		$this->CompetitorData=$KeyWords->Competitor();
		$this->DoNotPickKey=$KeyWords->DoNotPickKey();
		$this->DeductionFlag=$KeyWords->DeductionFlag();
	}

 //    public static $tempvar;
	public function GetDataOFAllMonth($text){		
		//print_r($text);die();
	    $ExtractedMonth=$this->GetDataForAllMonth($text);	    
	//	print_r($ExtractedMonth);die();
		$CalculateProcessingVolume=array();
		foreach($ExtractedMonth as $ExtractedMonthkey => $ExtractedMonthvalue){
		$DateAndMonthAndAccountNbr=$this->DateAndMonth($ExtractedMonthvalue);
	//	print_r($DateAndMonthAndAccountNbr);
		$tempvar=substr($DateAndMonthAndAccountNbr[0],-4);
		$tempvar='/'.$tempvar;
//		print_r($tempvar);
		$CompleteInfo=$this->GetDataForSections($ExtractedMonthvalue,$tempvar);
  //      print_r($CompleteInfo);
		$Month=strtotime(str_replace("-","/",$DateAndMonthAndAccountNbr[0]));
//		print_r($DateAndMonthAndAccountNbr[0]);
//		substr(string,start,length)

		
		$month=date("F",$Month);
//		print_r($month);

		$CalculateProcessingVolume[$month]=$this->ProcessingVolume($CompleteInfo,$DateAndMonthAndAccountNbr);
		$CalculateProcessingVolume[$month]["processingvolume"]["BankName"]="PNC BANK";
		$CalculateProcessingVolume[$month]["processingvolume"]["AccountNumber"]=$DateAndMonthAndAccountNbr[1];
		$CalculateProcessingVolume[$month]["deduction"]["BankName"]="PNC BANK";
		$CalculateProcessingVolume[$month]["deduction"]["AccountNumber"]=$DateAndMonthAndAccountNbr[1];

	}
		$CalculateProcessingVolume["Status"]="success";
		$CalculateProcessingVolume["Reason"]=null;
	//	print_r($CalculateProcessingVolume); die();
        return $CalculateProcessingVolume;

	}

public function GetDataForAllMonth($text){
 
if(strpos($text,"Write to")!== false){
    		$exd=explode("Write to",$text);
    	//	print_r($exd);die();
    		unset($exd[0]) ;
		}

		//print_r($exd);die();
		return $exd;

}

public function DateAndMonth($text){
//		print_r($text);die();
		preg_match('/Primary Account Number: (.*?)<br> /', $text, $Acandmonth);
		preg_match('/the Period (.*?) to (.*?)<br>/', $text, $DateAndMonth);

	    $AccountNbr=str_replace("-","",$Acandmonth[1]);

		$date1=date("m-d-Y",strtotime($DateAndMonth[1]));
//		print_r($date1);
		$date2=date("m-d-Y",strtotime($DateAndMonth[2]));
	//	print_r($date2);die();
		if($date1==$date2){
			//print_r(array($date1,$AccountNbr));
		    return array($date1,$AccountNbr);
		}else{
			//print_r(array($date2,$AccountNbr));
		    return array($date2,$AccountNbr);
		}
	}

    public function GetDataForSections($text,$tempvar){
  //  print_r($text);
    	$var;
        if (strpos($text, "Detail of Services Used During Current Period") !== false){
             $var="Detail of Services Used During Current Period";
        }elseif(strpos($text, "Business Checking Preferred -") !== false){
        	$var="Business Checking Preferred -";
        }
        else{$var=substr($text,-4);}//$var=explode("Checks and Other Deductions",$text);
	                /*$var=$var[2];*/
    	$Sections=array(
    	0=>array("StartSection"=>"Balance Summary","EndSection"=>"Deposits and Other Additions","ColumnCount"=>4),
    	1=>array("StartSection"=>"Daily Balance","EndSection"=>"Activity Detail","ColumnCount"=>2),
    	2=>array("StartSection"=>"Activity Detail","EndSection"=>"Checks and Other Deductions","ColumnCount"=>3),
    	3=>array("StartSection"=>"Checks and Other Deductions","EndSection"=>$var,"ColumnCount"=>5)
    );

    	foreach($Sections as $Sectionskey=>$Sectionsvalue){
    		preg_match("/(?<=".$Sectionsvalue['StartSection'].")(.*?)(?=".$Sectionsvalue['EndSection'].")/s",$text,$SectionExtracted);
    	//	print_r($SectionExtracted[0]);
    		$sectionrt=$SectionExtracted[0];
    		$data[$Sectionsvalue['StartSection']]=$this->IndividualSectionParser($sectionrt,$Sectionsvalue["ColumnCount"],$tempvar);//Here the array comes from function and becomes the second member of Start section

    	}
    //		print_r($data);//die();
		return $data;

    }

    public function IndividualSectionParser($SectionList,$ColumnCount,$tempvar){
    	preg_match_all("/(?:<br>)([\s\S]*?)(?=<br>)/s",$SectionList,$brList);
  //  	print_r($brList);
    	$brList=$brList[1];
 
    	$SectionData="";
    	if($ColumnCount==4){
    		$SectionData=$this->commonparser4($brList);
    	}elseif($ColumnCount==2){
			$SectionData=$this->commonparser2($brList,$tempvar);
		}elseif($ColumnCount==3){
			$SectionData=$this->commonparser3($brList,$tempvar);
		}elseif($ColumnCount==5){
			$SectionData=$this->commonparser5($brList,$tempvar);
		}

    	return $SectionData; 
    }

    public function commonparser5($brList,$tempvar){
    //			$AllList=$brList;
	//	print_r($brList);//die();
    			$Refinedarray=array();
    			$Acharray=array();
    			$Refinedarraykey;
    			$wee=0;
    			foreach($brList as $Sectionskey=>$Sectionsvalue){
                 if (strpos($Sectionsvalue, "Checks and Other Deductions") !== false){
                      $Refinedarraykey=$Sectionskey;
                      break;
                 }
    			}
    		
    		
    		for($Refinedarraykey;$Refinedarraykey<sizeof($brList);$Refinedarraykey++){
                  $Refinedarray[$wee]=$brList[$Refinedarraykey]; 
                  $wee++;
    //              print_r($Refinedarray);die();
    		}	
     //		print_r($Refinedarray);die();
    		$Refinedarraykey2; $wee2=0;
         foreach($Refinedarray as $Sectionskey2=>$Sectionsvalue2){
         	if($Sectionskey2 > 0){
         	if (strpos($Sectionsvalue2, "Check Card Purchases") !== false){
         		 $Refinedarraykey2=$Sectionskey2;
                //	 print_r($Refinedarraykey2.'Check Card');//die();
                	 break;
                	}elseif(strpos($Sectionsvalue2, "ACH Deductions") !== false){
                		$Refinedarraykey2=$Sectionskey2;
                //	 print_r($Refinedarraykey2.'AchDeduction');//die();
                	 break;
                	}elseif(strpos($Sectionsvalue2, "Service Charges and Fees") !== false){
                		$Refinedarraykey2=$Sectionskey2;
                //	 print_r($Refinedarraykey2.'Service Charges and Fees');//die();
                	 break;
                    }elseif(strpos($Sectionsvalue2, "Other Deductions") !== false){
                		$Refinedarraykey2=$Sectionskey2;
                //	 print_r($Refinedarraykey2.'Other Deductions');//die();
                	 break;
         }
     }
 }
        // print_r($Refinedarraykey2.'Outsideloop');//die();
         for($Refinedarraykey2;$Refinedarraykey2<sizeof($Refinedarray);$Refinedarraykey2++){
                  $Acharray[$wee2]=$Refinedarray[$Refinedarraykey2];
                  $wee2++;
         }

         // print_r($Acharray);//die();
   
    		$AllList=$Acharray;
  //   		print_r($AllList);die();		
		$CommonArray=array();
		$we=0;
		for($i=0;$i<sizeof($AllList);$i++){
			$Alllistfor=strip_tags($AllList[$i]);
//		print_r($Alllistfor);die();
			if(preg_match("/\d{2}\/\d{2}/",trim($Alllistfor)) && strtotime(trim($Alllistfor))){
			//	print_r($Alllistfor);die();
			//	print_r($AllList[$i+3]);die();
				if(!empty($AllList[$i+3]))if(preg_match("/^\d{2}\/\d{2}/",trim(strip_tags($AllList[$i+3])))){$extraLineData='';}else{$extraLineData=strip_tags($AllList[$i+3]);}
				if(!empty($AllList[$i+4]))if(preg_match("/^\d{2}\/\d{2}/",trim(strip_tags($AllList[$i+4])))){$extraLineData1='';}else{$extraLineData1=strip_tags($AllList[$i+4]);}
				$CommonArray[$we]["DatePosted"]=date("m-d-Y",strtotime(trim(strip_tags($AllList[$i].$tempvar))));
				$CommonArray[$we]["TransactionDescription"]=trim(strip_tags(($AllList[$i+2]))).$extraLineData1;
				$CommonArray[$we]["ReferenceNumber"]=$extraLineData;
				$CommonArray[$we]["Amount"]=trim(strip_tags($AllList[$i+1]));

				$we++;
			}
		}
	//	print_r($CommonArray);die();
		return $CommonArray;
    }


    public function commonparser3($brList,$tempvar){
    			$AllList=$brList;
	//	print_r($AllList);
		$CommonArray=array();
		$we=0;
		for($i=0;$i<sizeof($AllList);$i++){
			$Alllistfor=strip_tags($AllList[$i]);
//		print_r($Alllistfor);die();
			if(preg_match("/\d{2}\/\d{2}/",trim($Alllistfor)) && strtotime(trim($Alllistfor))){
			//	print_r($Alllistfor);die();
			//	print_r($AllList[$i+3]);die();
				if(!empty($AllList[$i+3]))if(preg_match("/^\d{2}\/\d{2}/",trim(strip_tags($AllList[$i+3])))){$extraLineData='';}else{$extraLineData=strip_tags($AllList[$i+3]);}
	         	if(!empty($AllList[$i+4]))if(preg_match("/^\d{2}\/\d{2}/",trim(strip_tags($AllList[$i+4])))){$extraLineData1='';}else{$extraLineData1=strip_tags($AllList[$i+4]);}
				$CommonArray[$we]["DatePosted"]=date("m-d-Y",strtotime(trim(strip_tags($AllList[$i].$tempvar))));
				$CommonArray[$we]["TransactionDescription"]=trim(strip_tags(($AllList[$i+2]))).$extraLineData1;
				$CommonArray[$we]["ReferenceNumber"]=$extraLineData;
				$CommonArray[$we]["Amount"]=trim(strip_tags($AllList[$i+1]));

				$we++;
			}
		}
	//	print_r($CommonArray);//die();
		return $CommonArray;
    }

    public function commonparser2($brList,$tempvar){
    	$AllList=$brList;
//		print_r($tempvar);die();
		$CommonArray=array();
		$we=0;
		for($i=0;$i<sizeof($AllList);$i++){
			$Alllistfor=strip_tags($AllList[$i]);
//		print_r($Alllistfor);die();
			if(preg_match("/\d{2}\/\d{2}/",trim($Alllistfor)) && strtotime(trim($Alllistfor))){
			//	print_r($Alllistfor);die();
			//	print_r($AllList[$i+3]);die();
				if(!empty($AllList[$i+3]))if(preg_match("/^\d{2}\/\d{2}/",trim(strip_tags($AllList[$i+3])))){$extraLineData='';}else{$extraLineData=strip_tags($AllList[$i+3]);}
				$CommonArray[$we]["CDWDate"]=date("m-d-Y",strtotime(trim(strip_tags($AllList[$i].$tempvar))));
		//		print_r($AllList[$i].$tempvar);die();
				//$CommonArray[$we]["Description"]=trim(strip_tags(($AllList[$i+2]))).$extraLineData;
				$CommonArray[$we]["Amount"]=trim(strip_tags($AllList[$i+1]));

				$we++;
			}
		}
//		print_r($CommonArray);die();
		foreach($CommonArray as $Sectionskey=>$CommonArrayValue){
                if (strpos($CommonArrayValue["Amount"], "-") !== false){
                	$Temp=str_replace("-","",$CommonArrayValue["Amount"]);
                	$Temp='-'.$Temp;
                	$CommonArray[$Sectionskey]["Amount"]=$Temp;
     //           	print_r($CommonArrayValue["Amount"]);
    //            	print_r($Temp);
                }
		}
	/*	foreach($CommonArray["Daily Balance"] as $NumNegatives){
			if (strpos($NumNegatives["Amount"], "-") !== false){				
				//$NumofDailyNegatives++;				
			} */
	//		print_r($CommonArray);die();
		return $CommonArray;
    }

    public function commonparser4($brList){
    	$AllList=array();
    	$AllList=$brList;
       
    	print_r($AllList);//die();
  //  	print_r($AllList[0]);
    	$summaryinfo=array();
    //	$summaryinfo=array('BeginningBalance' => null);
    	$summaryinfo['BeginningBalance']=$AllList[8];
 //   	$summaryinfo[$AllList[0]]=$AllList[8];	
    	
  	
    //	$summaryinfoBeginningBalance["BeginningBalance"]=$AllList[8];
    	$summaryinfo['DepositsAndOtherAddtions']=$AllList[9];
     	$summaryinfo['ChecksAndOtherdeductions']=$AllList[10];
    	$summaryinfo['EndingBalance']=$AllList[11];
    	$summaryinfo['AverageLedgerBalance']=$AllList[16];
    	$summaryinfo['AverageCollectedBalance']=$AllList[17]; 
  //      print_r($summaryinfo);
  
/*      foreach ($AllList as $key => $val) {
      //  $array[$key] = trim($val);
      	 $array[$key] = str_replace(" ","",$val);
    }print_r($array);die();   */
   // print_r($summaryinfo);
    	return $summaryinfo;
    }

    public function ProcessingVolume($CompleteInfo,$DateAndMonthAndAccountNbr){
//		print_r($CompleteInfo);
		$DoNoConsider=$this->Deduction;

	//	print_r($DoNoConsider);die();
		
		$DoNotPickKey=$this->DoNotPickKey;
		//$PVDEDESC=$CalculatePVDe["ProcessingVolumeSectionDescriptionColumn"];
       	$DeductionFlag=$this->DeductionFlag;
       //		print_r($DeductionFlag);
       	
 /*      	
		$MyArray=array("Reimbursement","Return","REBATE","Refund");	
		//	print_r($MyArray);
       $MyArray2=array_map('strtolower',$MyArray);
      // print_r($MyArray2);
        	
*/		
		$PAAmount=0;
		$DeNbrminus=0;
		$DeNbrPlus=0;
		$DeductionAmount=0;
		$Descritionfound='';
	//	print_r($CompleteInfo["Credits"]);die();//print_r($DoNotPickKey);
	//	print_r($CompleteInfo["Activity Detail"]);die();
		foreach($CompleteInfo["Activity Detail"] as $AmountSum){
			$PAAmount+=$AmountSum["Amount"];
			//print_r($PAAmount);die();			
			//print_r($AmountS"Description"]."\n");
			//print_r(strtolower($AmountSum["Description"])."\n");
			//print_r($DoNoConsider);um[
			foreach($DoNoConsider as $DoNoConsiderkey => $DoNoConsidervalue){
			    $description=" ".strtolower($AmountSum["TransactionDescription"])." ";
			    $DoNoConsidervalueSmall=strtolower($DoNoConsidervalue);
			    
			    if(strpos($description,$DoNoConsidervalueSmall) !== false){
				    if(trim($DoNoConsidervalueSmall)=='transfer credit'){
				        if(strpos($description,'dba') !== false){
				            
				        }else{
				            continue;
				        }
				    }

			        $DoNotStatus=true;
//	if(!$DoNoConsidervalueSmall==='reimbursement' || !$DoNoConsidervalueSmall==='return' ||  !$DoNoConsidervalueSmall==='refund' ||   !$DoNoConsidervalueSmall==='returned' ){	        
	    //	 if ($this->similar_in_array($DoNoConsidervalueSmall,$MyArray2)){    
	    	//                                      print_r($DoNoConsidervalueSmall.'asdfggggggggggggggggg'." \n"); die();	
	    			foreach($DoNotPickKey as $DoNotPickKeyKEY => $DoNotPickKeyVALUE){
	    			    $DoNotPickKeyVALUESmall=strtolower($DoNotPickKeyVALUE);
    				    if(strpos($description,$DoNotPickKeyVALUESmall) !== false){ // print_r($DoNotPickKeyVALUESmall.'asdfggggggggggggggggg'." \n"); die();	
        					$DoNotStatus=false;
    				    }
	    			}
	    	//   }	
//	   		 }	
                	foreach($DeductionFlag as $PickKeyKEY => $PickKeyVALUE){
                	    //print_r($PickKeyVALUE." \n");
                	    if(strpos($description,$PickKeyVALUE) !== false){
                	         $DoNotStatus=true;
                	    }
                	    
                	}

				    if($DoNotStatus){
				        $DeNbrminus++;
    					$DeductionAmount+=$AmountSum["Amount"];
    					$Descritionfound.=$DoNoConsidervalue.",";
    					break;
				    }
				}
			}
			$DeNbrPlus++;
		}
	
		$AvgNumberofMonthlyDeposits=$DeNbrPlus-$DeNbrminus;
		$NumofDailyNegatives=0;
		$AvgDailyBankBalance=0;
		$AvgDailyBankBalanceTemp=0;
		foreach($CompleteInfo["Daily Balance"] as $NumNegatives){
			if (strpos($NumNegatives["Amount"], "-") !== false){				
				$NumofDailyNegatives++;				
			} 
			$AvgDailyBankBalanceTemp+=$NumNegatives["Amount"];
		}
	//	$AvgDailyBankBalance=trim($CompleteInfo["Balance Summary"]["AverageLedgerBalance"]);//$NumNegatives["Amount"];
    
   //      if (!is_numeric($AvgDailyBankBalance)){
             if(!empty($CompleteInfo["Daily Balance"])){
                 $SizeOf=sizeof($CompleteInfo["Daily Balance"]);
                 $AvgDailyBankBalance=round(($AvgDailyBankBalanceTemp/$SizeOf),2); 
                  print_r($AvgDailyBankBalanceTemp);  print_r('    '.$AvgDailyBankBalance);
                  die();
             }
      //   }   
    
     //   print_r($NumofDailyNegatives);
    //    print_r($AvgDailyBankBalance);
	//	die();
// 		$SizeOf=sizeof($CompleteInfo["Daily Balance"]);
// 		$FinalAvgDailyBankBalance=$AvgDailyBankBalance/$SizeOf;
	//	print_r($FinalAvgDailyBankBalance);
		//print_r($CompleteInfo);die();


		$FoundCompititor1=array();
		$Amount=array();
		$keyCom=0;
		foreach($CompleteInfo["Checks and Other Deductions"] as $keyc=>$CompetitorSection){
			foreach($this->CompetitorData as $compkey => $compvalue){
				if(strpos(strtolower($CompetitorSection["TransactionDescription"]),strtolower($compvalue->Name)) !== false){
					$FoundCompititor1[$keyCom]=$CompetitorSection;
					$FoundCompititor1[$keyCom]["Name"]=$compvalue->Name;
					$FoundCompititor1[$keyCom]["CompetitorId"]=$compvalue->Id;
					$keyCom++;
				}
			}
		}
		
		     if (strpos($DateAndMonthAndAccountNbr[0], "12-31-1969") !== false){
             $EndVar=end($CompleteInfo["Activity Detail"]); // print_r($EndVar["DatePosted"]);str_replace(find,replace,string,count)
          $DateAndMonthAndAccountNbr[0]=str_replace("1969","2017",$EndVar["DatePosted"]);  //  print_r($DateAndMonthAndAccountNbr[0]); substr($myStr, 0, 5);
          $Statmentmonth=substr($DateAndMonthAndAccountNbr[0], 0, 2);  
    //          print_r($Statmentmonth." \n");
                  $now = new \DateTime('now');
  $month2 = $now->format('m');
 //  print_r($month2." \n");
   // $CurrentYear = $now->format('y');
             $CurrentYear =date('Y');
  //  print_r($CurrentYear." \n");
       if($month2==$Statmentmonth){$DateAndMonthAndAccountNbr[0]=str_replace("2017",$CurrentYear,$DateAndMonthAndAccountNbr[0]);
       }elseif($month2<$Statmentmonth){$DateAndMonthAndAccountNbr[0]=str_replace("2017",$CurrentYear-1,$DateAndMonthAndAccountNbr[0]);
    }elseif($month2>$Statmentmonth){$DateAndMonthAndAccountNbr[0]=str_replace("2017",$CurrentYear,$DateAndMonthAndAccountNbr[0]);  }
    
}

		
		$FinalJson=array();
		$FinalJson["processingvolume"]["Month"]=substr_replace($DateAndMonthAndAccountNbr[0],'01',3,2);
		$FinalJson["processingvolume"]["Amount"]=$PAAmount;
		$FinalJson["processingvolume"]["AmountDeductions"]=$PAAmount-$DeductionAmount;
		$FinalJson["processingvolume"]["NumofDailyNegatives"]=$NumofDailyNegatives;
		$FinalJson["processingvolume"]["AvgNumberofMonthlyDeposits"]=$AvgNumberofMonthlyDeposits;
		$FinalJson["processingvolume"]["AvgDailyBankBalance"]=$AvgDailyBankBalance;//round($FinalAvgDailyBankBalance,2);
		$FinalJson["deduction"]["Month"]=substr_replace($DateAndMonthAndAccountNbr[0],'01',3,2);
		$FinalJson["deduction"]["Amount"]=$DeductionAmount;
		$FinalJson["deduction"]["Type"]=substr_replace($DateAndMonthAndAccountNbr[0],'01',3,2)."-".$PAAmount;
		$FinalJson["deduction"]["Description"]=trim(implode(',',array_unique(explode(',', $Descritionfound))),","); //trim($Descritionfound,",");
		$FinalJson["competitor"]=$FoundCompititor1;
//		$FinalJson["EWithDrawals"]=$CompleteInfo["Card Purchases"];
		$FinalJson["DailySummary"]=$CompleteInfo["Daily Balance"];
		$FinalJson["ADeposits"]=$CompleteInfo["Activity Detail"];
		$FinalJson["EWithDrawals"]=$CompleteInfo["Checks and Other Deductions"];
		
	    //print_r(json_encode($FinalJson));die();
//		print_r($FinalJson);die();
		return $FinalJson;
	}


}
?>
